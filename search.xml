<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog添加评论区（Gitment）</title>
    <url>/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2020/05/05/Blog%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8C%BA%EF%BC%88Gitment%EF%BC%89/</url>
    <content><![CDATA[<p>上一篇<a href="https://zzisstudent.github.io/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2020/05/03/%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8EGitHub-Hexo%E6%90%AD%E5%BB%BABlog/">GitHub+Hexo搭建了Blog</a>，本篇为其添加评论区功能。</p>
<p>本文主要包含以下几部分：</p>
<p>一. 创建GitHub Repo存放评论及创建OAuth访问<br>二. 修改Gitment部分配置</p>
<h2 id="一-创建GitHub-Repo存放评论及创建OAuth访问"><a href="#一-创建GitHub-Repo存放评论及创建OAuth访问" class="headerlink" title="一. 创建GitHub Repo存放评论及创建OAuth访问"></a>一. 创建GitHub Repo存放评论及创建OAuth访问</h2><h4 id="个人设置页面注册OAuth应用"><a href="#个人设置页面注册OAuth应用" class="headerlink" title="个人设置页面注册OAuth应用"></a>个人设置页面注册OAuth应用</h4><p>按要求填写下列四项<br>Application name：blogComment #随便填<br>Homepage URL：<a href="https://zzisstudent.github.io/">https://zzisstudent.github.io/</a> #与blog URI保持一致<br>Application description： blogComment #随便填<br>Authorization callback URL： <a href="https://zzisstudent.github.io/">https://zzisstudent.github.io/</a> #与blog URI保持一致<br>注册后会得到Client ID与Client Secret  </p>
<h4 id="主题配置页面配置Gitment"><a href="#主题配置页面配置Gitment" class="headerlink" title="主题配置页面配置Gitment"></a>主题配置页面配置Gitment</h4><p>Hexo-Next已经集成了Gitment,只需要在配置repo与client即可<br>填写上一步生成的Client ID，Client Secret及存放评论的Repo</p>
<figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">gitment:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  github_user: zzisstudent <span class="comment"># MUST HAVE, Your Github ID</span></span><br><span class="line">  github_repo: blogComment <span class="comment"># MUST HAVE, The repo you use to store Gitment comments</span></span><br><span class="line">  client_id: **************** <span class="comment"># MUST HAVE, Github client id for the Gitment</span></span><br><span class="line">  client_secret: ***********</span><br></pre></td></tr></table></figure>

<h2 id="二-修改Gitment部分配置"><a href="#二-修改Gitment部分配置" class="headerlink" title="二. 修改Gitment部分配置"></a>二. 修改Gitment部分配置</h2><p>Gitment的写作者最初设置的域名中转证书已经过期了，因为这里直接使用的是GitHub的二级域名，因此直接使用<code>https://github.com/login/oauth/access_token</code>进行替代<br>Blog目录下创建目录存放js与css文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir gitment</span><br><span class="line">mkdir gitment/dist</span><br><span class="line">mkdir gitment/style</span><br></pre></td></tr></table></figure>
<p>拷贝gitmint.browser.js至gitment/dist/  </p>
<blockquote>
<p><a href="https://aimingoo.github.io/gitmint/dist/gitmint.browser.js" target="_blank" rel="noopener">https://aimingoo.github.io/gitmint/dist/gitmint.browser.js</a></p>
</blockquote>
<p>拷贝default.css至gitment/style</p>
<blockquote>
<p><a href="https://github.com/imsun/gitment/blob/master/style/default.css" target="_blank" rel="noopener">https://github.com/imsun/gitment/blob/master/style/default.css</a>  </p>
</blockquote>
<p>修改gitmint.browser.js</p>
<figure class="highlight bash"><figcaption><span>gitment/dist/gitmint.browser.js</span></figcaption><table><tr><td class="code"><pre><span class="line">//将gitmint.browser.js中的</span><br><span class="line">_utils.http.post(<span class="string">'https://gh-oauth.imsun.net'</span>, &#123;&#125;)  </span><br><span class="line">//改为</span><br><span class="line">_utils.http.post(<span class="string">'https://github.com/login/oauth/access_token'</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>修改gitment.swig, 指向Blog的URI</p>
<figure class="highlight shell"><figcaption><span>themes/next/layout/_third-party/comments/gitment.swig</span></figcaption><table><tr><td class="code"><pre><span class="line">//修改href与src指向Blog</span><br><span class="line">&lt;link rel="stylesheet" href="https://zzisstudent.github.io/gitment/style/default.css"&gt;</span><br><span class="line">&lt;script src="https://zzisstudent.github.io/gitment/dist/gitment.browser.js"&gt;&lt;/script&gt;</span><br><span class="line">//添加decodeURI，用于处理中文文件名</span><br><span class="line">id: decodeURI(window.location.pathname)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>ENV</tag>
        <tag>Hexo</tag>
        <tag>Gitment</tag>
      </tags>
  </entry>
  <entry>
    <title>如何基于GitHub+Hexo搭建Blog</title>
    <url>/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2020/05/03/%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8EGitHub-Hexo%E6%90%AD%E5%BB%BABlog/</url>
    <content><![CDATA[<p>本文主要描述如何基于GitHub与Hexo搭建个人Blog<br>一. 创建GitHub仓库，并启用Pages<br>二. 配置Hexo，选择Next Theme<br>三. 美化Blog页面<br>四. 如何写Blog  </p>
<h3 id="一-创建GitHub仓库，并启用Pages"><a href="#一-创建GitHub仓库，并启用Pages" class="headerlink" title="一. 创建GitHub仓库，并启用Pages"></a>一. 创建GitHub仓库，并启用Pages</h3><p>这部分没有额外要写的，只是强调一点，项目名称与用户名应该一致，例如用户名为user，则项目名为user.github.io</p>
<h3 id="二-配置Hexo，选择Next-Theme"><a href="#二-配置Hexo，选择Next-Theme" class="headerlink" title="二. 配置Hexo，选择Next Theme"></a>二. 配置Hexo，选择Next Theme</h3><p><strong>前置条件</strong>：<br>本地安装Git与NodeJS<br>创建Blog目录  </p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="初始化目录"><a href="#初始化目录" class="headerlink" title="初始化目录"></a>初始化目录</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="定制化需求"><a href="#定制化需求" class="headerlink" title="定制化需求"></a>定制化需求</h4><p><strong>注意事项</strong>：主目录，即Blog目录下的_config.yml是Hexo的配置文件。themes目录下的_config.yml是主题配置目录。<br>相关命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment">#清除缓存</span></span><br><span class="line">hexo g <span class="comment">#生成静态网页文件</span></span><br><span class="line">hexo s <span class="comment">#在本地查看，默认为http://localhost:4000/</span></span><br><span class="line">hexo d <span class="comment">#部署到GitHub.io</span></span><br></pre></td></tr></table></figure>

<h4 id="三-美化Blog页面"><a href="#三-美化Blog页面" class="headerlink" title="三. 美化Blog页面"></a>三. 美化Blog页面</h4><ul>
<li><h5 id="添加看板娘"><a href="#添加看板娘" class="headerlink" title="添加看板娘"></a>添加看板娘</h5><p>在Blog根目录下执行以下命令安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>

<p>在Blog Hexo配置文件中(<strong>不是主题配置文件</strong>)添加以下下配置项:  </p>
  <figure class="highlight bash"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment"># https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line">live2d:</span><br><span class="line"><span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">pluginRootPath: live2dw/</span><br><span class="line">pluginJsPath: lib/</span><br><span class="line">pluginModelPath: assets/ Relative)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 脚本加载源</span></span><br><span class="line">scriptFrom: <span class="built_in">local</span> <span class="comment"># 默认从本地加载脚本</span></span><br><span class="line"><span class="comment"># scriptFrom: jsdelivr # 从 jsdelivr CDN 加载脚本</span></span><br><span class="line"><span class="comment"># scriptFrom: unpkg # 从 unpkg CDN 加载脚本</span></span><br><span class="line"><span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 从自定义地址加载脚本</span></span><br><span class="line">tagMode: <span class="literal">false</span> <span class="comment"># 只在有 &#123;&#123; live2d() &#125;&#125; 标签的页面上加载 / 在所有页面上加载</span></span><br><span class="line"><span class="built_in">log</span>: <span class="literal">false</span> <span class="comment"># 是否在控制台打印日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择看板娘模型</span></span><br><span class="line">model:</span><br><span class="line">    use: live2d-widget-model-shizuku  <span class="comment"># npm package的名字</span></span><br><span class="line">    <span class="comment"># use: wanko # /live2d_models/ 目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 站点根目录下的模型文件夹名称</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 自定义网络数据源</span></span><br><span class="line">display:</span><br><span class="line">    position: left <span class="comment"># 显示在左边还是右边</span></span><br><span class="line">    width: 100 <span class="comment"># 宽度</span></span><br><span class="line">    height: 180 <span class="comment"># 高度</span></span><br><span class="line">mobile:</span><br><span class="line">    show: <span class="literal">false</span></span><br><span class="line">react:</span><br><span class="line">    opacityDefault: 0.7 <span class="comment"># 默认透明度</span></span><br></pre></td></tr></table></figure>

<p>查看Model形态  </p>
<blockquote>
<p>登录<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a>查看Model的样式</p>
</blockquote>
<p>修改_config.yml  </p>
<blockquote>
<p>live2d-widget-model-{modelName}</p>
</blockquote>
<p>下载NPM包  </p>
<blockquote>
<p>npm install live2d-widget-model-{modelName}</p>
</blockquote>
<p>使其生效(本地查看)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="添加粒子背景效果"><a href="#添加粒子背景效果" class="headerlink" title="添加粒子背景效果"></a>添加粒子背景效果</h5><p>最新版Next主题中已经包含相关效果<br>修改three_waves的值即可，<code>three_waves: true</code>  </p>
</li>
</ul>
<p><em>美化Blog参考文档</em>：<br><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="noopener">http://yearito.cn/posts/hexo-theme-beautify.html</a></p>
<h3 id="四-如何写Blog"><a href="#四-如何写Blog" class="headerlink" title="四. 如何写Blog"></a>四. 如何写Blog</h3><p>Blog主目录下执行<code>hexo new &quot;如何基于GitHub+Hexo搭建Blog&quot;</code><br>在source/_posts目录下修改md文件<br>更新分类与标签  </p>
<blockquote>
<p>categories: “环境搭建”<br>tags: Blog, ENV</p>
</blockquote>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>ENV</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在本地生成ceph-container的docker image</title>
    <url>/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/2020/05/11/%E5%A6%82%E4%BD%95%E5%9C%A8%E6%9C%AC%E5%9C%B0%E7%94%9F%E6%88%90ceph-container%E7%9A%84docker-image/</url>
    <content><![CDATA[<p>基于<a href="https://github.com/ceph/ceph-container项目和Ceph" target="_blank" rel="noopener">https://github.com/ceph/ceph-container项目和Ceph</a> octopus进行验证</p>
<p>Ceph官方有一个ceph-container项目，可以生成ceph docker image。但是因为是通过官方的repo去下载ceph rpm包，这样就无法应用本地代码更新。</p>
<p>生成官方ceph docker image的命令类似于：<code>make FLAVORS=&quot;octopus-15.2.1,centos,8&quot; build | tee output.log</code>, //这里的tee output.log是为了方便后续查看对比生成的日志差异</p>
<p>centos,8这里需要注意两个地方，第一，docker hub需要有对应版本的docker image，所以8.1不可以，8或者8.1.1911可以。<br>                            第二，需要去<a href="http://download.ceph.com/rpm-octopus/el8下下载rpm包，如果是8.1.1911路径就变成了http://download.ceph.com/rpm-octopus/el8.1.1911，就会因为找不到路径而报错。" target="_blank" rel="noopener">http://download.ceph.com/rpm-octopus/el8下下载rpm包，如果是8.1.1911路径就变成了http://download.ceph.com/rpm-octopus/el8.1.1911，就会因为找不到路径而报错。</a><br>基于以上，这里只能使用centos,8 </p>
<p>octopus-15.2.1这里需要注意，需要跟repo里的rpm包前缀一致</p>
<p>所以这里就需要阅读Makefile并修改</p>
<p>Makefile的调试： <a href="https://www.cnblogs.com/lotgu/p/5936465.html" target="_blank" rel="noopener">https://www.cnblogs.com/lotgu/p/5936465.html</a><br>命令回显和命令执行：<a href="https://blog.csdn.net/hahachenchen789/article/details/53995990" target="_blank" rel="noopener">https://blog.csdn.net/hahachenchen789/article/details/53995990</a></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>ENV</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>网络性能测试与netperf</title>
    <url>/uncategorized/2020/07/23/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%8Enetperf-1/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>网络性能测试与netperf</title>
    <url>/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/2017/04/21/%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%B8%8Enetperf/</url>
    <content><![CDATA[<p>netperf是一款能够测试网络基准性能的工具。能够用来测试单向的吞吐量以及端对端的延迟。<br>netperf [global options] – [test specific options]<br>global options:<br>-4 使用IPV4<br>-6 使用IPV6<br>-a 本机发送或者接收数据包的对齐大小，默认是8bytes<br>-A 远程机发送或者接收数据包的对齐大小，默认是8bytes<br>-c [rate] 结果中输出CPU利用率以及Service Demand的用时<br>-C [rate] 与-c效果一致，应用于remote端<br>-d 输出debug信息<br>-D 输出临时结果，但必须修改–enable-demo=yes，重新编译才能生效<br>-f G|M|K|g|m|k 设置输出中的Throughout的单位<br>-F fill_file 用于预填充发送buffer，避免send buffer被容易压缩的数据填充，例如0，1<br>-h 帮助页面<br>-H name|ip remote IP<br>-i max,min 为达到当前可信水平所设置的最大最小迭代数（cpu利用率瞬间提高一个档）<br>-I lvl,[intvl] 设置可信水平（默认99）和可信间隔（默认10）<br>-l testlen 测试时间，默认10s，这里需要注意的是，默认单位是s，但是也支持S，M，m, H,h。d|D按理说也应该支持，但一来没试，二来没看源码就不胡说了。<br>-L name|ip， 指明本地测试是跟那个位置在通信，默认是0.0.0.0<br>-o sizespec 设置-a设置的size的offset<br>-O sizespec 同-o<br>-p portnum 指定端口<br>-P 0|1 为1时显示上面一行标题，为0时不显示<br>-s seconds 发送数据之前停止seconds秒<br>-t testname 定义测试类型，支持TCP_STREAM等<br>-v level 跟-P功能类似，区别在于，-P 0显示的是下面的数据，-v 0 只显示最后的吞吐</p>
<p>大致理了下netperf的参数，现在来看看网络测试的需求。<br>网络性能测试就是看五个指标：</p>
<p>可用性<br>响应时间<br>网络利用率<br>网络吞吐量<br>网络带宽容量<br>可用性：<br>可用性这块很简单，首要任务就是测试网路通不通，这块直接ping测试，需要注意的是，网络设备跟根据包的大小设置多个不同大小的包缓冲区，因此测试时，有必要使用ping -s size，设置不同size的情况下，网路是否联通。<br>响应时间：<br>一次网络请求到响应，就是一个响应时间。响应时间太大，就会存在卡顿现象。<br>网络利用率：<br>使用时间占总时间的比率。同一时刻只能有一个报文在使用。<br>网络吞吐量：<br>网络吞吐量是指在某个时刻，在网络中的两个节点之间，提供给网络应用的剩余带宽。<br>网络带宽容量：<br>网络两个节点间的最大可用带宽。<br>三种从网络获取数据的方式：</p>
<p>通过snmp协议直接到网络设备中获取，如net-snmp工具<br>侦听相关的网络性能数据，典型的工具是tcpdump<br>自行产生相应的测试数据，如netperf<br>这次我们使用netperf<br>netperf基于TCP/UDP进行传输。有两种测试模式：批量数据传输（bulk data transfer）模式和请求/应答（request/reponse）模式。<br>netperf以client/server方式工作，server端是netserver，client端是netperf。client端与server端直接，首先建立一个控制连接，传递有关测试配置以及测试结果的信息。控制连接建立之后，再建立一个测试连接，用来进行网络测试。<br>TCP网络性能：<br>netperf可以模拟三种tcp流量模式：<br>1.单个tcp连接，批量传输大量数据<br>2.单个tcp连接，client请求，server应答的方式<br>3.多个tcp连接，每个连接中一对请求/应答的方式<br>UDP网络性能：<br>netperf可以模拟两种udp流量模式：<br>1.从client到server的单向批量传输<br>2.请求/应答的交易方式<br>由于udp传输的不可靠性，要确保发送的缓冲区大小不大于接收的缓冲区大小。</p>
<p>再后就是根据实际使用情况，选择-t模式了</p>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-netperf/" target="_blank" rel="noopener">netperf 与网络性能测量</a><br><a href="http://www.netperf.org/netperf/training/Netperf.html" target="_blank" rel="noopener">netperf training</a></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>netperf</tag>
        <tag>网络性能测试</tag>
      </tags>
  </entry>
</search>
